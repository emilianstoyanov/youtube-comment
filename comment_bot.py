import os
import json
import psycopg2
import random
import googleapiclient.discovery
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.errors import HttpError
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
import logging
from dotenv import load_dotenv

# ‚úÖ –õ–æ–≥–æ–≤–µ –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –æ—Ç .env —Ñ–∞–π–ª–∞
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
REFRESH_TOKEN = os.getenv("YOUTUBE_REFRESH_TOKEN")

if not DATABASE_URL:
    raise ValueError("‚ùå –ì—Ä–µ—à–∫–∞: DATABASE_URL –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")
if not GOOGLE_CREDENTIALS:
    raise ValueError("‚ùå –ì—Ä–µ—à–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")

SCOPES = ["https://www.googleapis.com/auth/youtube.force-ssl"]


def get_authenticated_service():
    """–°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å YouTube API —á—Ä–µ–∑ OAuth 2.0 (–±–µ–∑ –Ω—É–∂–¥–∞ –æ—Ç —Ä—ä—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ)"""
    creds = None
    credentials_json = json.loads(GOOGLE_CREDENTIALS)

    if REFRESH_TOKEN:
        creds = Credentials.from_authorized_user_info({
            "token": None,
            "refresh_token": REFRESH_TOKEN,
            "token_uri": "https://oauth2.googleapis.com/token",
            "client_id": credentials_json["installed"]["client_id"],
            "client_secret": credentials_json["installed"]["client_secret"]
        })
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_config(credentials_json, SCOPES)
        creds = flow.run_console()
        logger.info("üîë –ù–æ–≤ OAuth —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω. –ó–∞–ø–∞–∑–∏ refresh_token –∑–∞ –±—ä–¥–µ—â–∞ —É–ø–æ—Ç—Ä–µ–±–∞!")

    return googleapiclient.discovery.build("youtube", "v3", credentials=creds)


# ‚úÖ –°–≤—ä—Ä–∑–≤–∞–º–µ —Å–µ —Å YouTube API —á—Ä–µ–∑ OAuth
youtube = get_authenticated_service()


def connect_db():
    """–°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º PostgreSQL"""
    return psycopg2.connect(DATABASE_URL, sslmode='require')


def fetch_latest_video_for_channel(channel_id):
    """–í–∑–µ–º–∞ –Ω–∞–π-–Ω–æ–≤–æ—Ç–æ –≤–∏–¥–µ–æ –æ—Ç –¥–∞–¥–µ–Ω YouTube –∫–∞–Ω–∞–ª"""
    try:
        logger.info(f"üîç –ò–∑–≤–ª–∏—á–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ –≤–∏–¥–µ–æ –æ—Ç –∫–∞–Ω–∞–ª (channel_id): {channel_id}...")

        if not channel_id.startswith("UC"):
            logger.error(f"‚ùå –ì—Ä–µ—à–µ–Ω Channel ID: {channel_id}. –û—á–∞–∫–≤–∞–º–µ ID –¥–∞ –∑–∞–ø–æ—á–≤–∞ —Å 'UC'.")
            return None, None

        request = youtube.search().list(
            part="id",
            channelId=channel_id,  # –ü–æ–¥–∞–≤–∞–º–µ channel_url, –∫–æ–π—Ç–æ –≤–µ—á–µ –µ Channel ID
            order="date",
            maxResults=1
        )

        response = request.execute()
        logger.info(f"üì© –û—Ç–≥–æ–≤–æ—Ä –æ—Ç YouTube API: {response}")

        if "items" in response and len(response["items"]) > 0:
            video_data = response["items"][0]

            if "videoId" in video_data["id"]:
                video_id = video_data["id"]["videoId"]
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                logger.info(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {video_url}")
                return video_id, video_url
            else:
                logger.warning("‚ö†Ô∏è –ù—è–º–∞ videoId –≤ –æ—Ç–≥–æ–≤–æ—Ä–∞.")
                return None, None
        else:
            logger.warning(f"‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –≤–∏–¥–µ–∞ –∑–∞ –∫–∞–Ω–∞–ª {channel_id}.")
            return None, None

    except Exception as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –∑–∞ –∫–∞–Ω–∞–ª {channel_id}: {e}")
        return None, None


def add_video_to_db(video_id, video_url, channel_id, user_id):
    """–î–æ–±–∞–≤—è –Ω–æ–≤–æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–∞—Ç–∞, –∞–∫–æ –æ—â–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM videos WHERE video_id = %s", (video_id,))
    exists = cursor.fetchone()[0]
    if exists == 0:
        cursor.execute("""
            INSERT INTO videos (channel_id, video_url, video_id, user_id)
            VALUES (%s, %s, %s, %s)
        """, (channel_id, video_url, video_id, user_id))
        conn.commit()
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–µ–Ω–æ –≤ –±–∞–∑–∞—Ç–∞: {video_url}")
    cursor.close()
    conn.close()


def get_channels_from_db():
    """–í–∑–∏–º–∞ –≤—Å–∏—á–∫–∏ –∫–∞–Ω–∞–ª–∏ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –∏–º –æ—Ç –±–∞–∑–∞—Ç–∞"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT id, channel_url, user_id FROM channels")
    channels = cursor.fetchall()
    cursor.close()
    conn.close()
    return channels


def get_latest_videos():
    """–í–∑–µ–º–∞ –Ω–æ–≤–∏—Ç–µ –≤–∏–¥–µ–∞ –æ—Ç –±–∞–∑–∞—Ç–∞, –∫–æ–∏—Ç–æ –æ—â–µ –Ω–µ —Å–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT videos.video_id, videos.video_url, videos.channel_id, channels.user_id
        FROM videos
        JOIN channels ON videos.channel_id = channels.id
        WHERE videos.video_id NOT IN (SELECT video_id FROM posted_comments)
    """)
    videos = cursor.fetchall()
    cursor.close()
    conn.close()
    return videos


def has_already_commented(video_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≤–µ—á–µ —Å–º–µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–ª–∏ –¥–∞–¥–µ–Ω–æ –≤–∏–¥–µ–æ"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM posted_comments WHERE video_id = %s AND user_id = %s", (video_id, user_id))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    return count > 0


def post_comment(youtube, video_id, comment_text):
    """–ü—É–±–ª–∏–∫—É–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ YouTube"""
    try:
        request = youtube.commentThreads().insert(
            part="snippet",
            body={"snippet": {"videoId": video_id, "topLevelComment": {"snippet": {"textOriginal": comment_text}}}}
        )
        request.execute()
        logger.info(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –ø—É–±–ª–∏–∫—É–≤–∞–Ω –Ω–∞ {video_id}")
    except HttpError as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ: {e}")


def save_posted_comment(video_id, user_id, comment_text):
    """–ó–∞–ø–∞–∑–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∞ –≤ `posted_comments`, –∑–∞ –¥–∞ –Ω–µ —Å–µ –ø—É–±–ª–∏–∫—É–≤–∞ –æ—Ç–Ω–æ–≤–æ."""
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("""
        INSERT INTO posted_comments (video_id, user_id, comment_text)
        VALUES (%s, %s, %s)
    """, (video_id, user_id, comment_text))

    conn.commit()
    cursor.close()
    conn.close()
    logger.info(f"üíæ –ó–∞–ø–∞–∑–µ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ –±–∞–∑–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ {video_id}")


def run_comment_bot():
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞ –±–æ—Ç–∞"""
    channels = get_channels_from_db()

    for channel_url, user_id in channels:  # ‚úÖ –í–∑–∏–º–∞–º–µ channel_url –≤–º–µ—Å—Ç–æ channel_id
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –Ω–æ–≤–∏ –≤–∏–¥–µ–∞ –≤ –∫–∞–Ω–∞–ª {channel_url}...")

        video_id, video_url = fetch_latest_video_for_channel(channel_url)  # ‚úÖ –ø–æ–¥–∞–≤–∞–º–µ `channel_url`

        if video_id:
            add_video_to_db(video_id, video_url, channel_url, user_id)  # ‚úÖ –ø–æ–¥–∞–≤–∞–º–µ `channel_url`

    videos = get_latest_videos()

    if not videos:
        logger.info("üö´ –ù—è–º–∞ –Ω–æ–≤–∏ –≤–∏–¥–µ–∞ –∑–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–µ.")
        return

    for video_id, video_url, channel_id, user_id in videos:
        # ‚úÖ –î–æ–±–∞–≤—è–º–µ `user_id`, –∑–∞ –¥–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞ –Ω–∞ `has_already_commented(video_id, user_id)`
        if has_already_commented(video_id, user_id):
            logger.info(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–º–µ {video_url}, –∑–∞—â–æ—Ç–æ –≤–µ—á–µ —Å–º–µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–ª–∏.")
            continue  # üöÄ –ê–∫–æ –≤–µ—á–µ –µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–º–µ

        comments = ["–°—Ç—Ä–∞—Ö–æ—Ç–Ω–æ –≤–∏–¥–µ–æ! üî•", "–ë—Ä–∞–≤–æ, –º–Ω–æ–≥–æ –¥–æ–±—Ä–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ! üëå", "–¢–æ–∑–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –µ —Å—É–ø–µ—Ä –ø–æ–ª–µ–∑–µ–Ω! üöÄ"]
        comment_text = random.choice(comments)

        if post_comment(youtube, video_id, comment_text):
            logger.info(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –ø—É–±–ª–∏–∫—É–≤–∞–Ω: {comment_text} –Ω–∞ {video_url}")
            save_posted_comment(video_id, user_id, comment_text)  # ‚úÖ –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ –±–∞–∑–∞—Ç–∞


if __name__ == "__main__":
    run_comment_bot()
