import os
import json
import random
import logging
import psycopg2
import datetime
import googleapiclient.discovery
from telegram import Bot
from dotenv import load_dotenv
from googleapiclient.errors import HttpError
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow

# ‚úÖ –õ–æ–≥–æ–≤–µ –∑–∞ –¥–µ–±—ä–≥–≤–∞–Ω–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# ‚úÖ –ó–∞—Ä–µ–∂–¥–∞–º–µ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏—Ç–µ –æ—Ç .env —Ñ–∞–π–ª–∞
load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")
GOOGLE_CREDENTIALS = os.getenv("GOOGLE_CREDENTIALS")
REFRESH_TOKEN = os.getenv("YOUTUBE_REFRESH_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not DATABASE_URL:
    raise ValueError("‚ùå –ì—Ä–µ—à–∫–∞: DATABASE_URL –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")
if not GOOGLE_CREDENTIALS:
    raise ValueError("‚ùå –ì—Ä–µ—à–∫–∞: GOOGLE_CREDENTIALS –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")
if not TELEGRAM_CHAT_ID:
    raise ValueError("‚ùå –ì—Ä–µ—à–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω!")

SCOPES = ["https://www.googleapis.com/auth/youtube.force-ssl"]


def send_telegram_summary(commented_videos):
    """üì© –ò–∑–ø—Ä–∞—â–∞ –æ–±–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ Telegram —Å–ª–µ–¥ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–∞."""
    if not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID –Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω! –ü—Ä–æ–ø—É—Å–∫–∞–º–µ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ.")
        return

    try:
        bot = Bot(token=TELEGRAM_CHAT_ID)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –±–æ—Ç–∞

        message = "üì¢ **–î–Ω–µ–≤–µ–Ω –æ—Ç—á–µ—Ç –∑–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏**\n\n"
        message += f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%Y-%m-%d')}\n"
        message += f"üí¨ –û–±—â–æ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –≤–∏–¥–µ–∞: {len(commented_videos)}\n\n"

        for index, (video_url, comment_text) in enumerate(commented_videos, start=1):
            message += (
                f"üé¨ **–í–∏–¥–µ–æ {index}:** [{video_url}]({video_url})\n"
                f"üí¨ **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {comment_text}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # ‚úÖ –ò–∑–ø—Ä–∞—â–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ –∫—ä–º –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ Telegram
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode="Markdown", disable_web_page_preview=True)
        logger.info("üì© –ò–∑–ø—Ä–∞—Ç–µ–Ω–æ –∏–∑–≤–µ—Å—Ç–∏–µ –≤ Telegram!")

    except Exception as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ –≤ Telegram: {e}")


def get_authenticated_service():
    """–°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å YouTube API —á—Ä–µ–∑ OAuth 2.0 (–±–µ–∑ –Ω—É–∂–¥–∞ –æ—Ç —Ä—ä—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ)"""
    creds = None
    credentials_json = json.loads(GOOGLE_CREDENTIALS)

    if REFRESH_TOKEN:
        creds = Credentials.from_authorized_user_info({
            "token": None,
            "refresh_token": REFRESH_TOKEN,
            "token_uri": "https://oauth2.googleapis.com/token",
            "client_id": credentials_json["installed"]["client_id"],
            "client_secret": credentials_json["installed"]["client_secret"]
        })
        creds.refresh(Request())
    else:
        flow = InstalledAppFlow.from_client_config(credentials_json, SCOPES)
        creds = flow.run_console()
        logger.info("üîë –ù–æ–≤ OAuth —Ç–æ–∫–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω. –ó–∞–ø–∞–∑–∏ refresh_token –∑–∞ –±—ä–¥–µ—â–∞ —É–ø–æ—Ç—Ä–µ–±–∞!")

    return googleapiclient.discovery.build("youtube", "v3", credentials=creds)


# ‚úÖ –°–≤—ä—Ä–∑–≤–∞–º–µ —Å–µ —Å YouTube API —á—Ä–µ–∑ OAuth
youtube = get_authenticated_service()


def connect_db():
    """–°–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º PostgreSQL"""
    return psycopg2.connect(DATABASE_URL, sslmode='require')


def fetch_latest_video_for_channel(channel_url):
    """–í–∑–µ–º–∞ –Ω–∞–π-–Ω–æ–≤–æ—Ç–æ –≤–∏–¥–µ–æ –æ—Ç –¥–∞–¥–µ–Ω YouTube –∫–∞–Ω–∞–ª (channel_url –µ YouTube Channel ID)"""
    try:
        logger.info(f"üîç –ò–∑–≤–ª–∏—á–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–æ—Ç–æ –≤–∏–¥–µ–æ –æ—Ç –∫–∞–Ω–∞–ª: {channel_url}...")

        if not channel_url.startswith("UC"):
            logger.error(f"‚ùå –ì—Ä–µ—à–µ–Ω Channel ID: {channel_url}. –û—á–∞–∫–≤–∞–º–µ ID –¥–∞ –∑–∞–ø–æ—á–≤–∞ —Å 'UC'.")
            return None, None

        request = youtube.search().list(
            part="id",
            channelId=channel_url,  # –ü–æ–¥–∞–≤–∞–º–µ YouTube Channel ID
            order="date",
            maxResults=1
        )

        response = request.execute()
        logger.info(f"üì© –û—Ç–≥–æ–≤–æ—Ä –æ—Ç YouTube API: {response}")

        if "items" in response and len(response["items"]) > 0:
            video_data = response["items"][0]

            if "videoId" in video_data["id"]:
                video_id = video_data["id"]["videoId"]
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                logger.info(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {video_url}")
                return video_id, video_url
            else:
                logger.warning("‚ö†Ô∏è –ù—è–º–∞ videoId –≤ –æ—Ç–≥–æ–≤–æ—Ä–∞.")
                return None, None
        else:
            logger.warning(f"‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –≤–∏–¥–µ–∞ –∑–∞ –∫–∞–Ω–∞–ª {channel_url}.")
            return None, None

    except Exception as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ –∑–∞ –∫–∞–Ω–∞–ª {channel_url}: {e}")
        return None, None


def add_video_to_db(video_id, video_url, channel_id, user_id):
    """–î–æ–±–∞–≤—è –Ω–æ–≤–æ –≤–∏–¥–µ–æ –≤ –±–∞–∑–∞—Ç–∞, –∞–∫–æ –æ—â–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞"""
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM videos WHERE video_id = %s", (video_id,))
    exists = cursor.fetchone()[0]

    if exists == 0:
        cursor.execute("""
            INSERT INTO videos (channel_id, video_url, video_id, user_id)
            VALUES (%s, %s, %s, %s)
        """, (channel_id, video_url, video_id, user_id))
        conn.commit()
        logger.info(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–µ–Ω–æ –≤ –±–∞–∑–∞—Ç–∞: {video_url}")
        return True  # ‚úÖ –í–∏–¥–µ–æ –µ –Ω–æ–≤–æ

    cursor.close()
    conn.close()
    return False  # üö´ –í–∏–¥–µ–æ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞


def get_channels_from_db():
    """–í–∑–∏–º–∞ –≤—Å–∏—á–∫–∏ –∫–∞–Ω–∞–ª–∏ –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏—Ç–µ –∏–º –æ—Ç –±–∞–∑–∞—Ç–∞"""
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT channel_url, user_id FROM channels")  # ‚úÖ –í–∑–∏–º–∞–º–µ —Å–∞–º–æ –Ω—É–∂–Ω–∏—Ç–µ –∫–æ–ª–æ–Ω–∏
    channels = cursor.fetchall()

    cursor.close()
    conn.close()

    return [(row[0], row[1]) for row in channels]  # ‚úÖ –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ, —á–µ –≤—Ä—ä—â–∞–º–µ —Å–∞–º–æ –¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Ä–µ–¥


def get_latest_videos():
    """–í–∑–µ–º–∞ –Ω–æ–≤–∏—Ç–µ –≤–∏–¥–µ–∞ –æ—Ç –±–∞–∑–∞—Ç–∞, –∫–æ–∏—Ç–æ –æ—â–µ –Ω–µ —Å–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        SELECT videos.video_id, videos.video_url, videos.channel_id, channels.user_id
        FROM videos
        JOIN channels ON videos.channel_id = channels.id
        WHERE videos.video_id NOT IN (SELECT video_id FROM posted_comments)
    """)
    videos = cursor.fetchall()
    cursor.close()
    conn.close()
    return videos


def has_already_commented(video_id, user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ –≤–µ—á–µ —Å–º–µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–ª–∏ –¥–∞–¥–µ–Ω–æ –≤–∏–¥–µ–æ"""
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM posted_comments WHERE video_id = %s AND user_id = %s", (video_id, user_id))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    return count > 0


def post_comment(youtube, video_id, comment_text, user_id):
    """–ü—É–±–ª–∏–∫—É–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ YouTube –∏ –≥–æ –∑–∞–ø–∞–∑–≤–∞ –≤ –±–∞–∑–∞—Ç–∞."""
    try:
        request = youtube.commentThreads().insert(
            part="snippet",
            body={
                "snippet": {
                    "videoId": video_id,
                    "topLevelComment": {
                        "snippet": {
                            "textOriginal": comment_text
                        }
                    }
                }
            }
        )
        request.execute()

        # ‚úÖ –í–∑–∏–º–∞–º–µ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ –∏ –∏–º–µ—Ç–æ –Ω–∞ –∫–∞–Ω–∞–ª–∞
        video_title, channel_name = get_video_details(video_id)

        # ‚úÖ –ó–∞–ø–∞–∑–≤–∞–º–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∞ –≤ –±–∞–∑–∞—Ç–∞
        save_posted_comment(video_id, user_id, comment_text, video_title, channel_name)

        return True  # ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ
    except HttpError as e:
        error_message = e.content.decode("utf-8") if hasattr(e, "content") else str(e)
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫—É–≤–∞–Ω–µ: {error_message}")
        return False


def get_video_details(video_id):
    """–í–∑–∏–º–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ –æ—Ç YouTube API"""
    try:
        request = youtube.videos().list(
            part="snippet",
            id=video_id
        )
        response = request.execute()

        if "items" in response and len(response["items"]) > 0:
            video_title = response["items"][0]["snippet"]["title"]
            channel_name = response["items"][0]["snippet"]["channelTitle"]
            return video_title, channel_name
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∑–∞–≥–ª–∞–≤–∏–µ", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–Ω–∞–ª"

    except Exception as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ—Ç–æ: {e}")
        return "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –∑–∞–≥–ª–∞–≤–∏–µ", "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª"


def save_posted_comment(video_id, user_id, comment_text, video_title, channel_name):
    """–ó–∞–ø–∞–∑–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∞ –≤ `posted_comments`, –∑–∞ –¥–∞ –Ω–µ —Å–µ –ø—É–±–ª–∏–∫—É–≤–∞ –æ—Ç–Ω–æ–≤–æ."""
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("""
        INSERT INTO posted_comments (video_id, user_id, comment_text, video_title, channel_name, commented_at)
        VALUES (%s, %s, %s, %s, %s, NOW())
    """, (video_id, user_id, comment_text, video_title, channel_name))

    conn.commit()
    cursor.close()
    conn.close()
    logger.info(f"üíæ –ó–∞–ø–∞–∑–µ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä –≤ –±–∞–∑–∞—Ç–∞ –∑–∞ –≤–∏–¥–µ–æ {video_title} ({video_id})")


def get_channel_id_from_db(channel_url):
    """–í—Ä—ä—â–∞ channel_id –∑–∞ –¥–∞–¥–µ–Ω channel_url"""
    conn = connect_db()
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM channels WHERE channel_url = %s", (channel_url,))
    result = cursor.fetchone()

    cursor.close()
    conn.close()

    return result[0] if result else None


def run_comment_bot():
    """–û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞ –±–æ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–≤–∞ –Ω–æ–≤–∏ –≤–∏–¥–µ–∞, –∫–æ–º–µ–Ω—Ç–∏—Ä–∞ –≥–∏ –∏ –∏–∑–ø—Ä–∞—â–∞ –æ—Ç—á–µ—Ç –≤ Telegram"""
    channels = get_channels_from_db()
    commented_videos = []  # ‚úÖ –°—ä–±–∏—Ä–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏—Ç–µ –≤–∏–¥–µ–∞ –∑–∞ –¥–Ω–µ–≤–Ω–æ—Ç–æ –∏–∑–≤–µ—Å—Ç–∏–µ

    for channel_url, user_id in channels:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –Ω–æ–≤–∏ –≤–∏–¥–µ–∞ –≤ –∫–∞–Ω–∞–ª {channel_url}...")

        channel_id = get_channel_id_from_db(channel_url)
        if not channel_id:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–º–µ {channel_url}, –∑–∞—â–æ—Ç–æ –Ω—è–º–∞ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∞—â channel_id.")
            continue

        video_id, video_url = fetch_latest_video_for_channel(channel_url)

        if video_id:
            is_new_video = add_video_to_db(video_id, video_url, channel_id, user_id)

            if is_new_video:
                comments = [
                    "–°—Ç—Ä–∞—Ö–æ—Ç–Ω–æ –≤–∏–¥–µ–æ! üî•",
                    "–ë—Ä–∞–≤–æ, –º–Ω–æ–≥–æ –¥–æ–±—Ä–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ! üëå",
                    "–¢–æ–∑–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –µ —Å—É–ø–µ—Ä –ø–æ–ª–µ–∑–µ–Ω! üöÄ",
                    "–¢–æ–ø! üî•",
                    "üëåüëåüëå",
                    "üî•üî•üî•",
                    "cool! üöÄ",
                    "–ü—Ä–æ–¥—ä–ª–∂–∞–≤–∞–π –≤ —Å—ä—â–∏—è –¥—É—Ö! üôå",
                    " üôå üôå üôå ",
                    " –ë–ª–∞–≥–æ–¥–∞—Ä—è! üëå",
                ]
                comment_text = random.choice(comments)

                if post_comment(youtube, video_id, comment_text, user_id):
                    logger.info(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –ø—É–±–ª–∏–∫—É–≤–∞–Ω: {comment_text} –Ω–∞ {video_url}")
                    commented_videos.append((video_url, comment_text))  # ‚úÖ –ó–∞–ø–∏—Å–≤–∞–º–µ –≤–∏–¥–µ–æ –∑–∞ –∏–∑–≤–µ—Å—Ç–∏–µ—Ç–æ

    # ‚úÖ –ê–∫–æ –∏–º–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –≤–∏–¥–µ–∞, –∏–∑–ø—Ä–∞—â–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ
    if commented_videos:
        send_telegram_summary(commented_videos)


if __name__ == "__main__":
    run_comment_bot()
