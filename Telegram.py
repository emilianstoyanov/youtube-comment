import logging
import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import psycopg2
import os
import re
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –í–∑–µ–º–∏ TELEGRAM API Token –æ—Ç @BotFather
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# ‚úÖ –í–∑–µ–º–∏ –¥–∞–Ω–Ω–∏ –∑–∞ Postgres
DATABASE_URL = os.getenv("DATABASE_URL")

# ‚úÖ –í–∑–µ–º–∏ API –∫–ª—é—á –∑–∞ YouTube
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")

# ‚úÖ –°–≤—ä—Ä–∑–≤–∞–º–µ —Å–µ —Å YouTube API
youtube = build("youtube", "v3", developerKey=YOUTUBE_API_KEY)


def connect_db():
    """–°–≤—ä—Ä–∑–≤–∞–Ω–µ —Å –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏"""
    return psycopg2.connect(DATABASE_URL, sslmode='require')


# def get_channel_id_from_handle(handle):
#     """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ YouTube handle (@Supernaturalee) –≤ –∏—Å—Ç–∏–Ω—Å–∫–∏ Channel ID"""
#     try:
#         request = youtube.channels().list(
#             part="id",
#             forHandle=handle
#         )
#         response = request.execute()
#
#         if "items" in response and len(response["items"]) > 0:
#             return response["items"][0]["id"]
#         else:
#             logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∫–∞–Ω–∞–ª –∑–∞ handle: {handle}")
#             return None
#     except HttpError as e:
#         logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ Channel ID –∑–∞ handle {handle}: {e}")
#         return None

def get_channel_id_from_handle(handle):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ YouTube handle (@Supernaturalee) –≤ –∏—Å—Ç–∏–Ω—Å–∫–∏ Channel ID"""
    try:
        # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ "@" –æ—Ç–ø—Ä–µ–¥, –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        handle = handle.lstrip("@")

        request = youtube.channels().list(
            part="id",
            forHandle=handle
        )
        response = request.execute()

        if "items" in response and len(response["items"]) > 0:
            return response["items"][0]["id"]
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–º–µ—Ä–∏—Ö–º–µ –∫–∞–Ω–∞–ª –∑–∞ handle: {handle}")
            return None
    except HttpError as e:
        logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ Channel ID –∑–∞ handle {handle}: {e}")
        return None


# async def add_channel(update: Update, context: CallbackContext) -> None:
#     """–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ YouTube –∫–∞–Ω–∞–ª"""
#     user_id = update.message.from_user.id
#     username = update.message.from_user.username
#
#     if len(context.args) < 2:
#         await update.message.reply_text(
#             "‚ö†Ô∏è –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ **–∏–º–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞** –∏ **URL –Ω–∞ –∫–∞–Ω–∞–ª–∞**!\n"
#             "üìå –ü—Ä–∏–º–µ—Ä: `/add_channel KreteKlizmi https://www.youtube.com/@KreteKlizmi`")
#         return
#
#     channel_name = context.args[0]
#     channel_url = context.args[1]
#
#     if "youtube.com/@" in channel_url:
#         handle = channel_url.split("@")[1]
#         channel_id = get_channel_id_from_handle(handle)
#     else:
#         channel_id = channel_url
#
#     if not channel_id or not channel_id.startswith("UC"):
#         await update.message.reply_text("‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ Channel ID. –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ URL –µ –ø—Ä–∞–≤–∏–ª–µ–Ω!")
#         return
#
#     try:
#         conn = connect_db()
#         cursor = conn.cursor()
#
#         cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
#         user = cursor.fetchone()
#
#         if not user:
#             cursor.execute("INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
#                            (user_id, username))
#             user_id = cursor.fetchone()[0]
#             conn.commit()
#
#         cursor.execute("INSERT INTO channels (channel_name, channel_url, user_id) VALUES (%s, %s, %s)",
#                        (channel_name, channel_id, user_id))
#         conn.commit()
#
#         cursor.close()
#         conn.close()
#
#         await update.message.reply_text(
#             f"‚úÖ –ö–∞–Ω–∞–ª—ä—Ç **{channel_name}** –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüîó Channel ID: `{channel_id}`",
#             parse_mode="Markdown", disable_web_page_preview=True)
#
#     except Exception as e:
#         await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞: {e}")


async def add_channel(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ **–∏–º–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞** –∏ **URL –Ω–∞ –∫–∞–Ω–∞–ª–∞**! üìå –ü—Ä–∏–º–µ—Ä: `/add_channel KreteKlizmi https://www.youtube.com/@KreteKlizmi`"
        )
        return

    channel_name = context.args[0]  # –ò–º–µ—Ç–æ –Ω–∞ –∫–∞–Ω–∞–ª–∞
    channel_url = context.args[1]  # –õ–∏–Ω–∫ –∫—ä–º –∫–∞–Ω–∞–ª–∞

    # ‚úÖ –ê–∫–æ URL —Å—ä–¥—ä—Ä–∂–∞ "@", –∑–Ω–∞—á–∏ –µ handle
    if "youtube.com/@" in channel_url:
        handle = channel_url.split("@")[-1]  # –í–∑–∏–º–∞–º–µ —Å–∞–º–æ handle-–∞
        channel_id = get_channel_id_from_handle(handle)
    else:
        channel_id = channel_url  # –ê–∫–æ –≤–µ—á–µ –µ Channel ID

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ channel_id –µ –≤–∞–ª–∏–¥–µ–Ω
    if not channel_id or not channel_id.startswith("UC"):
        await update.message.reply_text("‚ùå –ì—Ä–µ—à–∫–∞: –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ Channel ID. –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ URL –µ –ø—Ä–∞–≤–∏–ª–µ–Ω!")
        return

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            cursor.execute("INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
                           (user_id, username))
            user_id = cursor.fetchone()[0]
            conn.commit()

        # ‚úÖ –î–æ–±–∞–≤—è–º–µ –∫–∞–Ω–∞–ª–∞ —Å —Ä–µ–∞–ª–Ω–æ—Ç–æ Channel ID
        cursor.execute("INSERT INTO channels (channel_name, channel_url, user_id) VALUES (%s, %s, %s)",
                       (channel_name, channel_id, user_id))
        conn.commit()

        cursor.close()
        conn.close()

        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª—ä—Ç **{channel_name}** –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüîó Channel ID: `{channel_id}`",
            parse_mode="Markdown", disable_web_page_preview=True
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞: {e}")


async def list_channels(update: Update, context: CallbackContext) -> None:
    """üìã –ò–∑–≤–µ–∂–¥–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –¥–æ–±–∞–≤–µ–Ω–∏ –∫–∞–Ω–∞–ª–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ Channel ID –∑–∞ –ø–æ-–ª–µ—Å–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
    user_id = update.message.from_user.id

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # ‚úÖ –í–∑–∏–º–∞–º–µ –∫–∞–Ω–∞–ª–∏—Ç–µ —Å ID, –∏–º–µ, URL –∏ –¥–∞—Ç–∞ –Ω–∞ –¥–æ–±–∞–≤—è–Ω–µ
        cursor.execute("""
            SELECT channel_name, channel_url, id, created_at 
            FROM channels 
            WHERE user_id = %s
            ORDER BY created_at DESC
        """, (user_id,))

        channels = cursor.fetchall()
        cursor.close()
        conn.close()

        if not channels:
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –¥–æ–±–∞–≤–µ–Ω–∏ –∫–∞–Ω–∞–ª–∏.")
            return

        # ‚úÖ –ü–æ–¥–æ–±—Ä–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–∞–Ω–µ —Å ID –Ω–∞ –∫–∞–Ω–∞–ª–∞
        message = "üìÇ **–¢–≤–æ–∏—Ç–µ YouTube –∫–∞–Ω–∞–ª–∏:**\n\n"
        for index, (name, channel_id, db_id, created_at) in enumerate(channels, start=1):
            formatted_date = created_at.strftime("%Y-%m-%d %H:%M:%S")  # –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ –¥–∞—Ç–∞—Ç–∞
            channel_link = f"https://www.youtube.com/channel/{channel_id}"

            message += (
                f"üîπ **{name}**\n"
                f"   üÜî **ID:** `{channel_id}`\n"
                f"   üìÖ **–î–æ–±–∞–≤–µ–Ω:** `{formatted_date}`\n"
                f"   üîó [–ü–æ—Å–µ—Ç–∏ –∫–∞–Ω–∞–ª–∞]({channel_link})\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∏—Ç–µ: {e}")


async def remove_channel(update: Update, context: CallbackContext) -> None:
    """‚ùå –ü—Ä–µ–º–∞—Ö–≤–∞ –∫–∞–Ω–∞–ª –æ—Ç –±–∞–∑–∞—Ç–∞ –ø–æ Channel ID"""
    user_id = update.message.from_user.id

    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ **Channel ID** –Ω–∞ –∫–∞–Ω–∞–ª–∞, –∫–æ–π—Ç–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ!\n"
                                        "üìå –ü—Ä–∏–º–µ—Ä: `/remove_channel UC_x5XG1OV2P6uZZ5FSM9Ttw`")
        return

    channel_id = context.args[0]

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –ø—Ä–∏—Ç–µ–∂–∞–≤–∞ —Ç–æ–∑–∏ –∫–∞–Ω–∞–ª
        cursor.execute("SELECT id FROM channels WHERE channel_url = %s AND user_id = %s", (channel_id, user_id))
        result = cursor.fetchone()

        if not result:
            await update.message.reply_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –∏–ª–∏ –Ω–µ —Ç–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏!")
        else:
            cursor.execute("DELETE FROM channels WHERE channel_url = %s AND user_id = %s", (channel_id, user_id))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª—ä—Ç —Å ID `{channel_id}` –±–µ—à–µ –ø—Ä–µ–º–∞—Ö–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ!",
                                            parse_mode="Markdown")

        cursor.close()
        conn.close()

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞: {e}")


async def add_video(update: Update, context: CallbackContext) -> None:
    """–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ"""
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ **URL –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ** –∏ **URL –Ω–∞ –∫–∞–Ω–∞–ª–∞**! üìå –ü—Ä–∏–º–µ—Ä: `/add_video https://www.youtube.com/watch?v=yszrl5SmFlA https://www.youtube.com/@Example`")
        return

    video_url = context.args[0]
    channel_url = context.args[1]

    video_id_match = re.search(r"v=([a-zA-Z0-9_-]{11})", video_url)
    if not video_id_match:
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω YouTube –ª–∏–Ω–∫!")
        return

    video_id = video_id_match.group(1)

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("SELECT id FROM channels WHERE channel_url = %s AND user_id = %s", (channel_url, user_id))
        result = cursor.fetchone()

        if result:
            channel_id = result[0]
            cursor.execute("INSERT INTO videos (user_id, channel_id, video_url, video_id) VALUES (%s, %s, %s, %s)",
                           (user_id, channel_id, video_url, video_id))
            conn.commit()
            await update.message.reply_text(f"üé¨ –í–∏–¥–µ–æ [{video_id}]({video_url}) –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                                            parse_mode="Markdown", disable_web_page_preview=True)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –∏–ª–∏ –Ω–µ —Ç–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏!")

        cursor.close()
        conn.close()

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ: {e}")


async def start_command(update: Update, context: CallbackContext) -> None:
    """üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∏ –º—É –¥–∞–≤–∞ –∫—Ä–∞—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –±–æ—Ç–∞"""
    user_name = update.message.from_user.first_name
    message = (
        f"üëã –ó–¥—Ä–∞–≤–µ–π, **{user_name}**!\n\n"
        "üé• **YouTube Auto Comment Bot** –µ —Ç—É–∫, –∑–∞ –¥–∞ —Ç–∏ –ø–æ–º–æ–≥–Ω–µ!\n"
        "‚úÖ –î–æ–±–∞–≤–∏ YouTube –∫–∞–Ω–∞–ª–∏ –∏ –±–æ—Ç—ä—Ç —â–µ –ø—É–±–ª–∏–∫—É–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –ø–æ–¥ –Ω–æ–≤–∏—Ç–µ –∏–º –≤–∏–¥–µ–∞.\n\n"
        "‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞–π `/help`, –∑–∞ –¥–∞ –≤–∏–¥–∏—à –≤—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –∫–æ–º–∞–Ω–¥–∏."
    )

    await update.message.reply_text(message, parse_mode="Markdown")


async def help_command(update: Update, context: CallbackContext) -> None:
    """üìã –ü–æ–∫–∞–∑–≤–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –Ω–∞–ª–∏—á–Ω–∏ –∫–æ–º–∞–Ω–¥–∏"""
    message = (
        "**üí° –î–æ—Å—Ç—ä–ø–Ω–∏ –∫–æ–º–∞–Ω–¥–∏:**\n\n"
        "üìå **–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª:**\n"
        "`/add_channel <–∏–º–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞> <URL –Ω–∞ –∫–∞–Ω–∞–ª–∞>`\n"
        "_–î–æ–±–∞–≤—è –Ω–æ–≤ YouTube –∫–∞–Ω–∞–ª –∫—ä–º –Ω–∞–±–ª—é–¥–∞–≤–∞–Ω–∏—Ç–µ._\n\n"

        "üìÇ **–õ–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∏:**\n"
        "`/list_channels`\n"
        "_–ü–æ–∫–∞–∑–≤–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –¥–æ–±–∞–≤–µ–Ω–∏ –∫–∞–Ω–∞–ª–∏._\n\n"

        "‚ùå **–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª:**\n"
        "`/remove_channel <Channel ID>`\n"
        "_–ü—Ä–µ–º–∞—Ö–≤–∞ –¥–∞–¥–µ–Ω –∫–∞–Ω–∞–ª –æ—Ç –±–∞–∑–∞—Ç–∞._\n\n"

        "üé¨ **–õ–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤–µ—á–µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –≤–∏–¥–µ–∞:**\n"
        "`/already_commented_videos`\n"
        "_–ü–æ–∫–∞–∑–≤–∞ —Å–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –≤–∏–¥–µ–∞, –∫–æ–∏—Ç–æ –±–æ—Ç—ä—Ç –≤–µ—á–µ –µ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–ª._\n\n"

        "üìÖ **–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –ø–æ –¥–∞—Ç–∞:**\n"
        "`/comments_from_date <YYYY-MM-DD>`\n"
        "_–ü–æ–∫–∞–∑–≤–∞ –≤—Å–∏—á–∫–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏, –ø—É–±–ª–∏–∫—É–≤–∞–Ω–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥–∞—Ç–∞._\n\n"

        "‚ÑπÔ∏è **–û—â–µ —Ñ—É–Ω–∫—Ü–∏–∏ —â–µ –±—ä–¥–∞—Ç –¥–æ–±–∞–≤–µ–Ω–∏ —Å–∫–æ—Ä–æ... üöÄ**"
    )

    await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)


async def already_commented_videos(update: Update, context: CallbackContext) -> None:
    """üìú –ü–æ–∫–∞–∑–≤–∞ —Å–ø–∏—Å—ä–∫ —Å –≤–∏–¥–µ–∞—Ç–∞, –Ω–∞ –∫–æ–∏—Ç–æ –µ –æ—Å—Ç–∞–≤–µ–Ω –∫–æ–º–µ–Ω—Ç–∞—Ä."""
    user_id = update.message.from_user.id  # ID –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # ‚úÖ –í–∑–∏–º–∞–º–µ –≤—Å–∏—á–∫–∏ –≤–∏–¥–µ–∞, –∫–æ–∏—Ç–æ –≤–µ—á–µ —Å–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        cursor.execute("""
            SELECT videos.video_url, posted_comments.video_title, posted_comments.channel_name, posted_comments.comment_text, posted_comments.commented_at
            FROM posted_comments
            JOIN videos ON posted_comments.video_id = videos.video_id
            WHERE posted_comments.user_id = %s
            ORDER BY posted_comments.commented_at DESC
            LIMIT 10
        """, (user_id,))

        commented_videos = cursor.fetchall()
        cursor.close()
        conn.close()

        if not commented_videos:
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –≤–∏–¥–µ–∞.")
            return

        message = "üìú **–¢–≤–æ–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏ –≤–∏–¥–µ–∞:**\n\n"
        for index, (video_url, video_title, channel_name, comment_text, commented_at) in enumerate(commented_videos,
                                                                                                   start=1):
            message += (
                f"üîπ **–í–∏–¥–µ–æ {index}:**\n"
                f"üé¨ [{video_title}]({video_url}) ‚Äì üì∫ {channel_name}\n"
                f"üìÖ {commented_at.strftime('%Y-%m-%d %H:%M')}\n"
                f"üí¨ _{comment_text}_\n\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∏—Ä–∞–Ω–∏—Ç–µ –≤–∏–¥–µ–∞: {e}")


async def comments_from_date(update: Update, context: CallbackContext) -> None:
    """üìÖ –õ–∏—Å—Ç–≤–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ —Å–∞–º–æ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –¥–∞—Ç–∞, –∫–∞—Ç–æ –∑–∞–ø–∞–∑–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç /already_commented_videos"""
    user_id = update.message.from_user.id

    if len(context.args) < 1:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç: `/comments_from_date YYYY-MM-DD`\n"
            "üìå –ù–∞–ø—Ä–∏–º–µ—Ä: `/comments_from_date 2025-02-08`"
        )
        return

    date_str = context.args[0]

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –¥–∞—Ç–∞—Ç–∞ –µ –≤–∞–ª–∏–¥–Ω–∞
    try:
        target_date = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ì—Ä–µ—à–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞—Ç–∞—Ç–∞! –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ `/comments_from_date YYYY-MM-DD`.")
        return

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("""
            SELECT videos.video_url, posted_comments.video_title, posted_comments.channel_name, posted_comments.comment_text, posted_comments.commented_at
            FROM posted_comments
            JOIN videos ON posted_comments.video_id = videos.video_id
            WHERE posted_comments.user_id = %s AND DATE(posted_comments.commented_at) = %s
            ORDER BY posted_comments.commented_at DESC
        """, (user_id, target_date))

        comments = cursor.fetchall()
        cursor.close()
        conn.close()

        if not comments:
            await update.message.reply_text(f"‚ÑπÔ∏è –ù—è–º–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏ –∑–∞ {date_str}.")
            return

        # ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
        message = f"üìÖ **–ö–æ–º–µ–Ω—Ç–∞—Ä–∏ –æ—Ç {date_str}:**\n\n"
        for video_url, video_title, channel_name, comment_text, commented_at in comments:
            message += (
                f"üé¨ **–í–∏–¥–µ–æ:** [{video_title}]({video_url})\n"
                f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_name}\n"
                f"üí¨ **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {comment_text}\n"
                f"üïí **–î–∞—Ç–∞ –∏ —á–∞—Å:** {commented_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—Ç–µ: {e}")


def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("list_channels", list_channels))
    application.add_handler(CommandHandler("remove_channel", remove_channel))
    application.add_handler(CommandHandler("already_commented_videos", already_commented_videos))
    application.add_handler(CommandHandler("comments_from_date", comments_from_date))
    # application.add_handler(CommandHandler("add_video", add_video))

    application.run_polling()


if __name__ == '__main__':
    main()
