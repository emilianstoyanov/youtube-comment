import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
import psycopg2
import os
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–æ–≤–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–∑–µ–º–∏ TELEGRAM API Token –æ—Ç @BotFather
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –í–∑–µ–º–∏ –¥–∞–Ω–Ω–∏ –∑–∞ Postgres
DATABASE_URL = os.getenv("DATABASE_URL")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ –∫—ä–º –±–∞–∑–∞—Ç–∞
def connect_db():
    conn = psycopg2.connect(DATABASE_URL, sslmode='require')
    return conn


# –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª
async def add_channel(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ **–∏–º–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞** –∏ **URL –Ω–∞ –∫–∞–Ω–∞–ª–∞**! üìå –ü—Ä–∏–º–µ—Ä: `/add_channel KreteKlizmi https://www.youtube.com/@KreteKlizmi`")
        return

    channel_name = context.args[0]  # –ò–º–µ—Ç–æ –Ω–∞ –∫–∞–Ω–∞–ª–∞
    channel_url = context.args[1]  # –õ–∏–Ω–∫ –∫—ä–º –∫–∞–Ω–∞–ª–∞

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            cursor.execute("INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
                           (user_id, username))
            user_id = cursor.fetchone()[0]
            conn.commit()

        # ‚úÖ –ü–æ–ø—Ä–∞–≤–µ–Ω–∞ SQL –∑–∞—è–≤–∫–∞ - –¥–æ–±–∞–≤—è–º–µ channel_name –∏ user_id
        cursor.execute("INSERT INTO channels (channel_name, channel_url, user_id) VALUES (%s, %s, %s)",
                       (channel_name, channel_url, user_id))
        conn.commit()

        cursor.close()
        conn.close()

        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª—ä—Ç **{channel_name}** –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüîó [–õ–∏–Ω–∫ –∫—ä–º –∫–∞–Ω–∞–ª–∞]({channel_url})",
            parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ
async def add_video(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    username = update.message.from_user.username

    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ö†Ô∏è –ú–æ–ª—è, –¥–æ–±–∞–≤–µ—Ç–µ **URL –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ** –∏ **URL –Ω–∞ –∫–∞–Ω–∞–ª–∞**! üìå –ü—Ä–∏–º–µ—Ä: `/add_video https://www.youtube.com/watch?v=yszrl5SmFlA https://www.youtube.com/@Example`")
        return

    video_url = context.args[0]
    channel_url = context.args[1]

    # ‚úÖ –ò–∑–≤–ª–∏—á–∞–º–µ video_id –æ—Ç –ª–∏–Ω–∫–∞
    video_id_match = re.search(r"v=([a-zA-Z0-9_-]{11})", video_url)
    if not video_id_match:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω YouTube –ª–∏–Ω–∫! –£–≤–µ—Ä–µ—Ç–µ —Å–µ, —á–µ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω —Ñ–æ—Ä–º–∞—Ç: `https://www.youtube.com/watch?v=VIDEO_ID`")
        return

    video_id = video_id_match.group(1)  # –í–∑–∏–º–∞–º–µ ID-—Ç–æ –æ—Ç URL-–∞

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            cursor.execute("INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
                           (user_id, username))
            user_id = cursor.fetchone()[0]
            conn.commit()

        # –ù–∞–º–µ—Ä–∏ channel_id —á—Ä–µ–∑ URL –Ω–∞ –∫–∞–Ω–∞–ª–∞
        cursor.execute("SELECT id FROM channels WHERE channel_url = %s AND user_id = %s", (channel_url, user_id))
        result = cursor.fetchone()

        if result:
            channel_id = result[0]

            # ‚úÖ –í–∫–∞—Ä–≤–∞–º–µ –∏ video_id –≤ –±–∞–∑–∞—Ç–∞
            cursor.execute("""
                INSERT INTO videos (user_id, channel_id, video_url, video_id)
                VALUES (%s, %s, %s, %s)
            """, (user_id, channel_id, video_url, video_id))
            conn.commit()

            await update.message.reply_text(f"üé¨ –í–∏–¥–µ–æ [{video_id}]({video_url}) –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
                                            parse_mode="Markdown", disable_web_page_preview=True)
        else:
            await update.message.reply_text("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤ –±–∞–∑–∞—Ç–∞ –∏–ª–∏ –Ω–µ —Ç–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏!")

        cursor.close()
        conn.close()

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ: {e}")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –∫–∞–Ω–∞–ª–∏
async def list_channels(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("SELECT channel_url FROM channels WHERE user_id = %s", (user_id,))
        channels = cursor.fetchall()

        cursor.close()
        conn.close()

        if not channels:
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –¥–æ–±–∞–≤–µ–Ω–∏ –∫–∞–Ω–∞–ª–∏.")
            return

        message = "üìÇ **–¢–≤–æ–∏—Ç–µ –∫–∞–Ω–∞–ª–∏:**\n\n"
        for index, (url,) in enumerate(channels, start=1):
            message += f"üîπ [{url}]({url})\n"

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª–∏—Ç–µ: {e}")


async def list_videos(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    try:
        conn = connect_db()
        cursor = conn.cursor()

        cursor.execute("SELECT video_url FROM videos WHERE user_id = %s", (user_id,))
        videos = cursor.fetchall()

        cursor.close()
        conn.close()

        if not videos:
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –¥–æ–±–∞–≤–µ–Ω–∏ –≤–∏–¥–µ–∞.")
            return

        message = "üìú **–¢–≤–æ–∏—Ç–µ –≤–∏–¥–µ–∞:**\n\n"
        for index, (url,) in enumerate(videos, start=1):
            message += f"üé¨ [{url}]({url})\n"

        await update.message.reply_text(message, parse_mode="Markdown", disable_web_page_preview=True)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∏–¥–µ–∞—Ç–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext) -> None:
    user_name = update.message.from_user.first_name
    message = (
        f"üëã **–ó–¥—Ä–∞–≤–µ–π, {user_name}!**\n\n"
        f"–î–æ–±—Ä–µ –¥–æ—à—ä–ª –≤ YouTube Comment Bot! üé•\n"
        f"‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞–π –∫–æ–º–∞–Ω–¥–∞—Ç–∞ `/help`, –∑–∞ –¥–∞ –≤–∏–¥–∏—à –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –±–æ—Ç–∞."
    )

    await update.message.reply_text(message, parse_mode="Markdown")


async def help_command(update: Update, context: CallbackContext) -> None:
    message = (
        f"üí° **–ö–æ–º–∞–Ω–¥–∏, –∫–æ–∏—Ç–æ –º–æ–∂–µ—à –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞—à:**\n\n"

        f"üìå **–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞–Ω–∞–ª:**\n"
        f"   `/add_channel`  *<–∏–º–µ –Ω–∞ –∫–∞–Ω–∞–ª–∞> <URL –Ω–∞ –∫–∞–Ω–∞–ª–∞>*\n\n"

        f"üé¨ **–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –≤–∏–¥–µ–æ:**\n"
        f"   `/add_video`  *<URL –Ω–∞ –≤–∏–¥–µ–æ—Ç–æ> <URL –Ω–∞ –∫–∞–Ω–∞–ª–∞>*\n\n"

        f"üìÇ **–õ–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –∫–∞–Ω–∞–ª–∏:**\n"
        f"   `/list_channels`\n\n"

        f"üìú **–õ–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –≤–∏–¥–µ–∞:**\n"
        f"   `/list_videos`\n\n"

        f"üìù **–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞:**\n"
        f"   `/add_keyword`  *<–∫–ª—é—á–æ–≤–∞ –¥—É–º–∞>*\n\n"

        f"üîé **–õ–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ç–≤–æ–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏:**\n"
        f"   `/list_keywords`\n\n"

        f"‚ÑπÔ∏è **–û—â–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–æ—Ä–æ...** üöÄ"
    )

    await update.message.reply_text(message, parse_mode="Markdown")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
async def add_keyword(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id  # ID –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    username = update.message.from_user.username  # Telegram username (–ø–æ –∏–∑–±–æ—Ä)

    if len(context.args) < 1:
        await update.message.reply_text("‚ö†Ô∏è –ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞! üìå –ü—Ä–∏–º–µ—Ä: `/add_keyword scam`")
        return

    keyword = context.args[0].lower()

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            # –ê–∫–æ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞, –≥–æ –¥–æ–±–∞–≤—è–º–µ –≤ `users`
            cursor.execute("INSERT INTO users (telegram_id, username) VALUES (%s, %s) RETURNING id",
                           (user_id, username))
            user_id = cursor.fetchone()[0]
            conn.commit()

        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ –≤ `keywords`
        cursor.execute("INSERT INTO keywords (user_id, keyword) VALUES (%s, %s)", (user_id, keyword))
        conn.commit()

        cursor.close()
        conn.close()

        await update.message.reply_text(f"‚úÖ –ö–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ **'{keyword}'** –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                                        parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –∑–∞ –ª–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ –¥–æ–±–∞–≤–µ–Ω–∏—Ç–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
async def list_keywords(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id  # ID –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –í–∑–∏–º–∞–º–µ –≤—Å–∏—á–∫–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
        cursor.execute("SELECT keyword FROM keywords WHERE user_id = %s", (user_id,))
        keywords = cursor.fetchall()

        cursor.close()
        conn.close()

        if not keywords:
            await update.message.reply_text("‚ö†Ô∏è –í—Å–µ –æ—â–µ –Ω—è–º–∞—à –¥–æ–±–∞–≤–µ–Ω–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏.")
            return

        message = "üîé **–¢–≤–æ–∏—Ç–µ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏:**\n\n"
        for index, (keyword,) in enumerate(keywords, start=1):
            message += f"‚û§ **{index}. {keyword}**\n"

        await update.message.reply_text(message, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –∫–ª—é—á–æ–≤–∏—Ç–µ –¥—É–º–∏: {e}")


# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
def main() -> None:
    # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ –Ω–æ–≤–∏—è Application –∫–ª–∞—Å –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ç–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add_channel", add_channel))
    application.add_handler(CommandHandler("add_video", add_video))
    application.add_handler(CommandHandler("list_channels", list_channels))
    application.add_handler(CommandHandler("list_videos", list_videos))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("add_keyword", add_keyword))
    application.add_handler(CommandHandler("list_keywords", list_keywords))

    # –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
